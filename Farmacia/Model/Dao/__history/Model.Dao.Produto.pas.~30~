unit Model.Dao.Produto;

interface

uses
  Model.Dao.Interfaces, Model.Entidades.Produto, Data.DB, Conexao.Interfaces,
  Conexao.Firedac, Vcl.Dialogs;

type
  TDAOProduto = class(TInterfacedObject, iDAOEntity<TProduto>)
    private
      FProduto: TProduto;
      FConexao: iConexao;
      FDataSet: TDataSet;
    public
      constructor Create;
      destructor Destroy; override;
      class function New: iDAOEntity<TProduto>;
      function Listar: iDAOEntity<TProduto>;
      function ListarPorId(Id: Variant): iDAOEntity<TProduto>;
      function Excluir(Id: Integer): iDAOEntity<TProduto>; overload;
      function Excluir: iDAOEntity<TProduto>; overload;
      function Atualizar: iDAOEntity<TProduto>;
      function Inserir: iDAOEntity<TProduto>;
      function DataSet(DataSource: TDataSource): iDAOEntity<TProduto>;
      function This: TProduto;
  end;

implementation

uses
  System.SysUtils;

function TDAOProduto.Atualizar: iDAOEntity<TProduto>;
begin
   Result := Self;
   try
      FConexao
         .SQL('UPDATE PRODUTO SET DESCRICAO=:DESCRICAO, VALOR=:VALOR WHERE ID=:ID')
         .Params('DESCRICAO',FProduto.Descricao)
         .Params('VALOR',FProduto.Valor)
         .Params('ID',FProduto.Id)
         .ExecSQL
   except on e:Exception do
      raise Exception.Create('Error ao tentar atualizar o resgistro: '+e.Message);
   end;
end;

constructor TDAOProduto.Create;
begin
   FConexao := TModelConexao.New;
   FProduto := TProduto.Create(Self);
end;

function TDAOProduto.DataSet(DataSource: TDataSource): iDAOEntity<TProduto>;
begin
   Result := Self;
   if not Assigned(FDataSet) then
      DataSource.DataSet := FConexao.DataSet
   else
      DataSource.DataSet := FDataSet;
end;

destructor TDAOProduto.Destroy;
begin
   FProduto.DisposeOf;

  inherited;
end;

function TDAOProduto.Excluir: iDAOEntity<TProduto>;
begin
   Result := Self;
   try
      FConexao
         .SQL('DELETE FROM PRODUTO WHERE ID=:ID')
         .Params('ID',FProduto.Id)
         .ExecSQL;
   except on e:Exception do
      raise Exception.Create('Error ao tentar exluir o registro: '+e.Message);
   end;
end;

function TDAOProduto.Excluir(Id: Integer): iDAOEntity<TProduto>;
begin
   Result := Self;
   try
      FConexao
         .SQL('DELETE FROM PRODUTO WHERE ID=:ID')
         .Params('ID',Id)
         .ExecSQL;
      MessageDlg('Produto Cadastrado!', mtInformation, [mbOK], 0);
   except on e:Exception do
      raise Exception.Create('Error ao tentar exluir o registro: '+e.Message);
   end;
end;

function TDAOProduto.Inserir: iDAOEntity<TProduto>;
begin
   Result := Self;
   try
      FConexao
        .SQL('INSERT INTO PRODUTO (DESCRICAO, VALOR, ESTOQUE) '+
             'VALUES (:DESCRICAO, :VALOR, 0)')
        .Params('DESCRICAO', FProduto.Descricao)
        .Params('VALOR', FProduto.Valor)
        .ExecSQL;
      MessageDlg('Produto Cadastrado!', mtInformation, [mbOK], 0);
   except on e:Exception do
      raise Exception.Create('Erro ao tentar inserir os dados: '+ e.Message);
   end;
end;

function TDAOProduto.Listar: iDAOEntity<TProduto>;
begin
   Result := Self;
   FDataSet :=
      FConexao
         .SQL('SELECT * FROM PRODUTO')
         .Open
         .DataSet;
end;

function TDAOProduto.ListarPorId(Id: Variant): iDAOEntity<TProduto>;
begin
   Result := Self;
   FDataSet :=
      FConexao
         .SQL('SELECT * FROM PRODUTO WHERE ID=:ID')
         .Params('ID',FProduto.Id)
         .Open.DataSet;
end;

class function TDAOProduto.New: iDAOEntity<TProduto>;
begin
   Result := Self.Create;
end;

function TDAOProduto.This: TProduto;
begin
   Result := FProduto;
end;

end.
